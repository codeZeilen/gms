name: check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  R_LIBS_SITE: '/__m/prepared/SiteLibrary'
  R_LIBS_USER: '/__m/prepared/Library'

jobs:
  check:
    runs-on: ubuntu-latest 
    container: codezeilen/pik-piam-test-image:latest

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
          extra-repositories: "https://rse.pik-potsdam.de/r/packages"

      - name: Hard-reset the lib USER lib path
        shell: bash
        run:
          export R_LIBS_USER=/__m/prepared/Library

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          lockfile-create-lib: '.libPaths()[1]'
          extra-packages: |
            lucode2
            covr
            madrat
            magclass
            citation
            gms
            goxygen
            GDPuc
          # piam packages also available on CRAN (madrat, magclass, citation,
          # gms, goxygen, GDPuc) will usually have an outdated binary version
          # available; by using extra-packages we get the newest version
        env: 
          R_LIBS_SITE: '/__m/prepared/SiteLibrary'
          R_LIBS_USER: '/__m/prepared/Library'

      - uses: actions/checkout@v5
        with:
          set-safe-directory: true

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3

      - name: Run pre-commit checks
        shell: bash
        run: |
          python3 -m pip install pre-commit
          python3 -m pip freeze --local
          pre-commit run --show-diff-on-failure --color=always --all-files

      - name: Verify validation key
        shell: Rscript {0}
        run: lucode2:::validkey(stopIfInvalid = TRUE)

      - name: Verify that lucode2::buildLibrary was successful
        if: github.event_name == 'pull_request'
        shell: Rscript {0}
        run: lucode2:::isVersionUpdated()

      - name: Checks
        shell: Rscript {0}
        run: |
          options(crayon.enabled = TRUE)
          lucode2::check(runLinter = FALSE)

      - name: Test coverage
        shell: Rscript {0}
        run: |
          nonDummyTests <- setdiff(list.files("./tests/testthat/"), c("test-dummy.R", "_snaps"))
          if(length(nonDummyTests) > 0 && !lucode2:::loadBuildLibraryConfig()[["skipCoverage"]]) covr::codecov(quiet = FALSE)
        env:
          NOT_CRAN: "true"
